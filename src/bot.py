import logging
import json
import time
import aioschedule
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from aiogram.utils import executor
from datetime import datetime, date, timedelta
from INFO import BOT_TOKEN, ADMIN_PASSWORD, ADMINS

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
admins = set()

# —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
bot_logger = logging.getLogger('bot_logger')
# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
bot_handler = logging.FileHandler('bot.log')
# —Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
bot_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
# –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot_handler.setFormatter(bot_formatter)
bot_logger.addHandler(bot_handler)
# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º INFO –∏ –≤—ã—à–µ
bot_logger.setLevel(logging.INFO)

# —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
user_logger = logging.getLogger('user_logger')
# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
user_handler = logging.FileHandler('users.log')
# —Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
user_formatter = logging.Formatter('%(asctime)s - %(message)s')
# –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
user_handler.setFormatter(user_formatter)
user_logger.addHandler(user_handler)
# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º INFO –∏ –≤—ã—à–µ
user_logger.setLevel(logging.INFO)

# —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
chat_logger = logging.getLogger('chat_logger')
# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
chat_handler = logging.FileHandler('chat.log')
# —Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
chat_formatter = logging.Formatter('%(asctime)s - %(message)s')
# –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
chat_handler.setFormatter(chat_formatter)
chat_logger.addHandler(chat_handler)
# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º INFO –∏ –≤—ã—à–µ
chat_logger.setLevel(logging.INFO)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AdminState(StatesGroup):
    menu = State()
    admin_login = State()


class UserState(StatesGroup):
    WAITING_ADMIN_LOGIN = State()
    WAITING_ADMIN_PASSWORD = State()
    UPDATING = State()
    WAITING_GROUP_NAME = State()
    WAITING_SUBGROUP = State()
    WAITING_DATE = State()


# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
groups = ['–ê–ú-31,33', '–ê–ú-32,34', '–ê–ú-41', '–ê–ú-42,43', '–ê–°-11', '–ê–≠-11', '–ê–≠-21,22', '–ê–≠-31,32', '–ë–£-21,22',
          '–ë–£-31,32', '–ò–°-11', '–ò–°-12', '–ò–°-13', '–ò–°-21,23', '–ò–°-22,24', '–ò–°-31,34',
          '–ò–°-32,35', '–ò–°-33,36', '–ò–°-41,43', '–ò–°-42,44', '–õ–ó-11', '–õ–ó-21,22', '–õ–ó-31,32', '–õ–ó-41', '–õ–ü-11',
          '–ú–≠-11', '–ú–≠-21,22', '–ú–≠-31,32', '–ú–≠-41,42', '–û–õ-11', '–û–õ-21,22', '–û–õ-31,32',
          '–û–ü-11', '–û–ü-21,22', '–û–ü-31,32', '–û–ü-41,44', '–†–î-11', '–†–ó-11', '–¢–î-11', '–¢–î-21,22', '–¢–î-31,32',
          '–¢–î-41,42', '–¢–ü-11', '–¢–ü-21', '–¢–ü-31,32', '–¢–ü-41', '–≠–ú-11', '–≠–ú-12', '–≠–ú-21,22',
          '–≠–ú-31,32', '–≠–ú-41,43', '–≠–ú-42,44', '–≠–°-11', '–≠–°-21', '–≠–°-31,32', '–≠–°-41,42', '–Æ–†-11,13', '–Æ–†-12',
          '–Æ–†-21,23', '–Æ–†-22,24', '–Æ–†-25', '–Æ–†-31,33', '–Æ–†-32,34', '–Æ–†-35,36']

groups1 = ['–ê–ú-31', '–ê–ú-33', '–ê–ú-32', '–ê–ú-34', '–ê–ú-41', '–ê–ú-42', '–ê–ú-43', '–ê–°-11', '–ê–≠-11', '–ê–≠-21', '–ê–≠-22', '–ê–≠-31',
           '–ê–≠-32', '–ë–£-21', '–ë–£-22', '–ë–£-31', '–ë–£-32', '–ò–°-11', '–ò–°-12', '–ò–°-13', '–ò–°-21', '–ò–°-23', '–ò–°-22', '–ò–°-24',
           '–ò–°-31', '–ò–°-34',
           '–ò–°-32', '–ò–°-35', '–ò–°-33', '–ò–°-36', '–ò–°-41', '–ò–°-43', '–ò–°-42', '–ò–°-44', '–õ–ó-11', '–õ–ó-21', '–õ–ó-22', '–õ–ó-31',
           '–õ–ó-32', '–õ–ó-41', '–õ–ü-11', '–ú–≠-11', '–ú–≠-21', '–ú–≠-22', '–ú–≠-31', '–ú–≠-32', '–ú–≠-41', '–ú–≠-42', '–û–õ-11', '–û–õ-21',
           '–û–õ-22', '–û–õ-31', '–û–õ-32',
           '–û–ü-11', '–û–ü-21', '–û–ü-22', '–û–ü-31', '–û–ü-32', '–û–ü-41', '–û–ü-44', '–†–î-11', '–†–ó-11', '–¢–î-11', '–¢–î-21', '–¢–î-22',
           '–¢–î-31', '–¢–î-32', '–¢–î-41', '–¢–î-42', '–¢–ü-11', '–¢–ü-21', '–¢–ü-31', '–¢–ü-32', '–¢–ü-41', '–≠–ú-11', '–≠–ú-12', '–≠–ú-21',
           '–≠–ú-22',
           '–≠–ú-31', '–≠–ú-32', '–≠–ú-41', '–≠–ú-43', '–≠–ú-42', '–≠–ú-44', '–≠–°-11', '–≠–°-21', '–≠–°-31', '–≠–°-32', '–≠–°-41', '–≠–°-42',
           '–Æ–†-11', '–Æ–†-13', '–Æ–†-12', '–Æ–†-21', '–Æ–†-23', '–Æ–†-22', '–Æ–†-24', '–Æ–†-25', '–Æ–†-31', '–Æ–†-33', '–Æ–†-32', '–Æ–†-34',
           '–Æ–†-35', '–Æ–†-36']

SUBGROUPS = ['1', '2']


async def search_in_splitted_groups(group_num):
    group_nuzn = ''
    for group in groups:
        groups_splitted = await split_groups(group)
        if group_num in groups_splitted:
            group_nuzn = group
    return group_nuzn


async def split_groups(group):
    split_groups = []
    if len(group) > 5:
        prefix, suffixes = group.split('-')
        for suffix in suffixes.split(','):
            split_groups.append(f"{prefix}-{suffix}")
    else:
        split_groups.append(group)
    return split_groups


async def search_date(group, subgroup):
    try:
        today = date.today()
        with open('all_data.json') as f:
            data_json = json.load(f)
        dates = set()
        for day in data_json:
            day_info = data_json[day]
            date_clear = str(day).replace('[', '').replace(']', '').replace("'", "")
            date_for = date_clear + '.2023'
            for collect in day_info:
                if collect == group and subgroup == '1':
                    file_date = datetime.strptime(date_for, '%d.%m.%Y').date()
                    if file_date >= today:
                        dates.add(date_clear)
                if collect == group and subgroup == '2':
                    file_date = datetime.strptime(date_for, '%d.%m.%Y').date()
                    if file_date >= today:
                        dates.add(date_clear)
        timeList = list(dates)
        return sorted(timeList)
    except Exception:
        time.sleep(5)
        await search_date(group, subgroup)


async def reading_json(group_name, subgroup, date_search):
    try:
        with open('all_data.json') as x:
            data_json = json.load(x)
    except Exception:
        time.sleep(5)
        with open('all_data.json') as x:
            data_json = json.load(x)

    key_day = date_search
    key_group = group_name
    key_subgroup = subgroup

    lessons = data_json[key_day][key_group][key_subgroup]['lesson']
    teachers = data_json[key_day][key_group][key_subgroup]['teacher']
    auds = data_json[key_day][key_group][key_subgroup]['aud']

    output = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}\n"
    for i in range(len(lessons)):
        sub_name = lessons[i]
        tech_name = teachers[i]
        class_name = auds[i]
        if sub_name != 'None':
            output += f"{i + 1}. {sub_name}\n"
        if tech_name != 'None':
            output += f"    {tech_name}\n"
        if class_name != 'None':
            output += f"    –ê—É–¥–∏—Ç–æ—Ä–∏—è: {class_name}\n"
    return output


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def add_admin(user_id: int):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    # –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins.add(user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
    bot_logger.info(f"User {message.from_user.id, message.from_user.username} started the bot")
    user_logger.info(f"{message.from_user.id, message.from_user.username}")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "Help-–º–µ–Ω—é –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /help\n"
        "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä –û–õ-11):üîç")
    # await cmd_help(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(Command("help"))
async def cmd_help(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
    bot_logger.info(f"User {message.from_user.id, message.from_user.username} entered to help menu")
    await message.answer(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:üë®‚Äçüíª\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üëæ\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üÜò\n"
        "/back - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø üîç\n"
        "/admin - –∞–¥–º–∏–Ω–∫–∞ üòé\n"
        "–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç—ã –º–æ–∂–µ—à—å —Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É :)\n"
        "\n\n–ò –¥–∞, –±–æ—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥–∞—Ö. –ù–µ –∑–∞–±—É–¥—å, –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç, –≤—ã–¥–∞—Ç—å –µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(Command("admin"))
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
async def admin_login(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
    """
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
    bot_logger.info(f"User {message.from_user.id, message.from_user.username} entered to admin login menu")
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:')
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await AdminState.admin_login.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
@dp.message_handler(state=AdminState.admin_login)
async def process_admin_login(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
    """

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("Stats", callback_data="admin_stats"),
        InlineKeyboardButton("Logs", callback_data="admin_log_upload"),
        InlineKeyboardButton("Users", callback_data="admin_user_upload"),
        InlineKeyboardButton("Chats", callback_data="admin_chat_upload"),
        InlineKeyboardButton("Exit", callback_data="admin_exit"),
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    if message.text == ADMIN_PASSWORD:
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ admin_login –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.finish()
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await add_admin(message.from_user.id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await message.answer(str(admins))
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=keyboard)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
        bot_logger.info(f"User {message.from_user.id, message.from_user.username} entered to admin panel")
        await AdminState.menu.set()
    elif message.text == '0':
        await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n'
                             '–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help')
        await state.reset_state()
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n'
                             '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏ "0"')
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
        bot_logger.info(f"User {message.from_user.id, message.from_user.username} entered invalid password")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query_handler(state=AdminState.menu)
async def process_callback_admin(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    data = callback_query.data
    if data == "admin_stats":
        await bot.answer_callback_query(callback_query.id, text="–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ...")
    elif data == "admin_log_upload":
        with open('bot.log', 'rb') as file:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±–æ—Ç–æ–º
            await bot.send_document(callback_query.from_user.id, file)
            file.close()
        # —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open("bot.log", "w") as file:
            file.write("")
            file.close()
    elif data == "admin_chat_upload":
        with open('chat.log', 'rb') as file:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±–æ—Ç–æ–º
            await bot.send_document(callback_query.from_user.id, file)
            file.close()
        # —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        with open("chat.log", "w") as file:
            file.write("")
            file.close()
    elif data == "admin_user_upload":
        with open('users.log', 'rb') as file:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±–æ—Ç–æ–º
            await bot.send_document(callback_query.from_user.id, file)
    elif data == "admin_exit":
        await bot.answer_callback_query(callback_query.id, text="–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await state.finish()


@dp.message_handler(lambda message: message.text.upper() not in groups1)
async def process_invalid_group_name(message: types.Message):
    user_logger.info(f"{message.from_user.id, message.from_user.username}")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
    chat_logger.info(
        f"chat {message.chat.id, message.chat.title} user {message.from_user.id, message.from_user.username} text {message.text}")


@dp.message_handler(lambda message: message.text.upper() in groups1)
async def process_group_name(message: types.Message, state: FSMContext):
    await UserState.WAITING_GROUP_NAME.set()
    group_name = await search_in_splitted_groups(message.text.upper())
    user_logger.info(f"{message.from_user.id, message.from_user.username}")
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ
    bot_logger.info(
        f"User {message.from_user.id, message.from_user.username} selected {message.text.upper(), group_name}")
    keyboard = InlineKeyboardMarkup(row_width=2)
    for subgroup in SUBGROUPS:
        button = InlineKeyboardButton(
            text=f"–ü–æ–¥–≥—Ä—É–ø–ø–∞ {subgroup}",
            callback_data=subgroup
        )
        keyboard.add(button)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É:",
        reply_markup=keyboard,
    )

    await UserState.WAITING_SUBGROUP.set()
    await state.update_data(group_name=group_name)


@dp.callback_query_handler(lambda c: True, state=UserState.WAITING_SUBGROUP)
async def process_subgroup(callback_query: types.CallbackQuery, state: FSMContext):
    subgroup = callback_query.data

    data = await state.get_data()
    group_name = data.get("group_name")

    keyboard = InlineKeyboardMarkup(row_width=2)

    DATES = await search_date(group_name, subgroup)
    print(DATES)
    for date in DATES:
        button = InlineKeyboardButton(
            text=date,
            callback_data=f"{group_name}_{subgroup}_{date}"
        )
        keyboard.add(button)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=keyboard,
    )

    await UserState.WAITING_DATE.set()


@dp.callback_query_handler(lambda c: True, state=UserState.WAITING_DATE)
async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data.split("_")
    group_name, subgroup, date = data[0], data[1], data[2]

    await bot.answer_callback_query(callback_query.id)

    result_message = await reading_json(group_name, subgroup, date)

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=result_message,
        parse_mode=ParseMode.HTML,
    )
    await UserState.WAITING_GROUP_NAME.set()
    await state.finish()


@dp.message_handler(Command("back"), state=UserState.WAITING_SUBGROUP)
@dp.message_handler(Command("back"), state=UserState.WAITING_DATE)
@dp.message_handler(Command("back"), state=AdminState.menu)
@dp.message_handler(Command("back"), state=AdminState.admin_login)
async def cmd_back(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–û–õ-11 –∏–ª–∏ –û–õ-12):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.reset_state()


if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception:
        time.sleep(5)
        executor.start_polling(dp, skip_updates=True)
